// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_int = require("bs-platform/lib/js/js_int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var arr = Fs.readFileSync("input/q11in.txt", "utf8").split(",");

function compass(dir, cur) {
  switch (dir) {
    case "n" :
        return {
                x: cur.x,
                y: cur.y + 1 | 0
              };
    case "ne" :
        return {
                x: cur.x + 1 | 0,
                y: cur.y + 1 | 0
              };
    case "nw" :
        return {
                x: cur.x - 1 | 0,
                y: cur.y + 1 | 0
              };
    case "s" :
        return {
                x: cur.x,
                y: cur.y - 1 | 0
              };
    case "se" :
        return {
                x: cur.x + 1 | 0,
                y: cur.y - 1 | 0
              };
    case "sw" :
        return {
                x: cur.x - 1 | 0,
                y: cur.y - 1 | 0
              };
    default:
      return cur;
  }
}

var position = {
  x: 0,
  y: 0
};

var max = {
  contents: Js_int.min
};

function find_shortest(input) {
  var x = Math.abs(input.x);
  var y = Math.abs(input.y);
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function get_position(arr, input) {
  var _index = 0;
  var _input = input;
  while(true) {
    var input$1 = _input;
    var index = _index;
    var v = Belt_Array.get(arr, index);
    if (v === undefined) {
      return input$1;
    }
    var update = compass(v, input$1);
    var v$1 = find_shortest(update);
    if (max.contents < v$1) {
      max.contents = v$1;
    }
    _input = update;
    _index = index + 1 | 0;
    continue ;
  };
}

get_position(arr, position);

console.log(max.contents);

exports.arr = arr;
exports.compass = compass;
exports.position = position;
exports.max = max;
exports.find_shortest = find_shortest;
exports.get_position = get_position;
/* arr Not a pure module */
