// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Garter$Aoc2017 = require("./garter.bs.js");

var arr = Belt_Array.map(Fs.readFileSync("input/q6in.txt", "utf8").trim().split("\t"), Caml_format.caml_int_of_string);

var hub = [];

var hub_index = {
  contents: 0
};

function distribute(arr) {
  var length = arr.length;
  var max_index = Garter$Aoc2017.$$Array.maxIndex(arr);
  var max = arr[max_index];
  var _max = max;
  var _i = Caml_int32.mod_(max_index + 1 | 0, length);
  while(true) {
    var i = _i;
    var max$1 = _max;
    if (max$1 <= 0) {
      return arr;
    }
    Garter$Aoc2017.$$Array.updateUnsafe(arr, i, (function (param) {
            return 1 + param | 0;
          }));
    _i = Caml_int32.mod_(i + 1 | 0, length);
    _max = max$1 - 1 | 0;
    continue ;
  };
}

function save(arr, hub, hub_index) {
  var hub_index_ = hub_index.contents;
  hub[hub_index_] = arr.slice();
  hub_index.contents = hub_index.contents + 1 | 0;
  
}

function check(arr, _index, hub, hub_index) {
  while(true) {
    var index = _index;
    var hub_index_ = hub_index.contents;
    if (index >= hub_index_) {
      return false;
    }
    var hub_arr = Belt_Array.get(hub, index);
    if (hub_arr === undefined) {
      return false;
    }
    if (Caml_obj.caml_equal(Caml_option.valFromOption(hub_arr), arr)) {
      return true;
    }
    _index = index + 1 | 0;
    continue ;
  };
}

function checkidx(arr, _index, hub, hub_index) {
  while(true) {
    var index = _index;
    var hub_index_ = hub_index.contents;
    if (index >= hub_index_) {
      return -1;
    }
    var hub_arr = Belt_Array.get(hub, index);
    if (hub_arr === undefined) {
      return -1;
    }
    if (Caml_obj.caml_equal(Caml_option.valFromOption(hub_arr), arr)) {
      return index;
    }
    _index = index + 1 | 0;
    continue ;
  };
}

function part1(_arr, _step, hub) {
  while(true) {
    var step = _step;
    var arr = _arr;
    var distributed_array = distribute(arr);
    if (check(distributed_array, 0, hub, hub_index) === true) {
      console.log("array is found!");
      console.log("index=>", checkidx(distributed_array, 0, hub, hub_index));
      return step + 1 | 0;
    }
    save(distributed_array, hub, hub_index);
    _step = step + 1 | 0;
    _arr = distributed_array;
    continue ;
  };
}

save(arr, hub, hub_index);

console.log(part1(arr, 0, hub));

exports.arr = arr;
exports.hub = hub;
exports.hub_index = hub_index;
exports.distribute = distribute;
exports.save = save;
exports.check = check;
exports.checkidx = checkidx;
exports.part1 = part1;
/* arr Not a pure module */
