// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var input = Belt_Array.reduce(Belt_Array.map(Fs.readFileSync("1in.txt", "utf8").split("\n"), Caml_format.caml_int_of_string), {}, (function (acc, v) {
        acc[String(v)] = v;
        return acc;
      }));

var keys = Object.keys(input);

var part2_keys = Belt_Array.map(Object.keys(input), (function (v) {
        return 2020 - Caml_format.caml_int_of_string(v) | 0;
      }));

var part1 = keys.filter(function (v) {
      return Js_dict.get(input, String(2020 - Caml_format.caml_int_of_string(v) | 0)) !== undefined;
    });

var part2 = Belt_Array.keepWithIndex(part2_keys, (function (v, i) {
        var temp = keys.filter(function (w) {
              var x = Js_dict.get(input, String(v - Caml_format.caml_int_of_string(w) | 0));
              if (x !== undefined) {
                console.log("(v1, v2, i)=>", Caml_format.caml_int_of_string(w), x, 2020 - part2_keys[i] | 0);
                return true;
              } else {
                return false;
              }
            });
        return temp.length === 2;
      }));

console.log(Belt_Array.reduce(part1, 1, (function (acc, v) {
            return Math.imul(acc, Caml_format.caml_int_of_string(v));
          })));

console.log(part2);

exports.input = input;
exports.keys = keys;
exports.part2_keys = part2_keys;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
